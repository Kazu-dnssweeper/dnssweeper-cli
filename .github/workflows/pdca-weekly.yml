name: Weekly PDCA Review
on:
  schedule:
    - cron: '0 1 * * 5'  # 毎週金曜 UTC 1:00 (JST 10:00)
  workflow_dispatch:  # 手動実行も可能

jobs:
  weekly-review:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 全履歴を取得（統計分析用）
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Collect metrics
        id: metrics
        run: |
          echo "### 📊 週次メトリクス収集" >> $GITHUB_STEP_SUMMARY
          
          # コミット数を取得
          COMMITS_THIS_WEEK=$(git log --since="1 week ago" --oneline | wc -l)
          echo "commits_count=${COMMITS_THIS_WEEK}" >> $GITHUB_OUTPUT
          echo "- コミット数: ${COMMITS_THIS_WEEK}" >> $GITHUB_STEP_SUMMARY
          
          # PRマージ数を取得（GitHubトークンが必要）
          # PR_MERGED=$(gh pr list --state merged --limit 100 --json mergedAt --jq '[.[] | select(.mergedAt > (now - 604800))] | length')
          
          # テストカバレッジを取得
          pnpm test:coverage --silent > coverage-output.txt 2>&1 || true
          COVERAGE=$(grep -oP 'All files.*?\|\s*\K[0-9.]+' coverage-output.txt | head -1 || echo "0")
          echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
          echo "- テストカバレッジ: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          
          # Issue統計
          OPEN_ISSUES=$(gh issue list --state open --json number --jq 'length' || echo "0")
          echo "open_issues=${OPEN_ISSUES}" >> $GITHUB_OUTPUT
          echo "- オープンIssue数: ${OPEN_ISSUES}" >> $GITHUB_STEP_SUMMARY
          
      - name: Calculate DORA metrics
        id: dora
        run: |
          echo "### 🎯 DORAメトリクス" >> $GITHUB_STEP_SUMMARY
          
          # デプロイメント頻度（週あたりのリリース数）
          RELEASES_THIS_WEEK=$(gh release list --limit 10 --json createdAt --jq '[.[] | select(.createdAt > (now - 604800))] | length' || echo "0")
          echo "deployment_frequency=${RELEASES_THIS_WEEK}" >> $GITHUB_OUTPUT
          echo "- デプロイメント頻度: ${RELEASES_THIS_WEEK}回/週" >> $GITHUB_STEP_SUMMARY
          
          # 変更失敗率（簡易版：失敗したワークフローの割合）
          TOTAL_RUNS=$(gh run list --limit 100 --json conclusion --jq 'length' || echo "1")
          FAILED_RUNS=$(gh run list --limit 100 --json conclusion --jq '[.[] | select(.conclusion == "failure")] | length' || echo "0")
          FAILURE_RATE=$(( FAILED_RUNS * 100 / TOTAL_RUNS ))
          echo "change_failure_rate=${FAILURE_RATE}" >> $GITHUB_OUTPUT
          echo "- 変更失敗率: ${FAILURE_RATE}%" >> $GITHUB_STEP_SUMMARY
          
      - name: Generate weekly report
        run: |
          WEEK=$(date +'%Y-W%V')
          mkdir -p .pdca/weekly
          
          cat > .pdca/weekly/${WEEK}-report.yml << EOF
          week: "${WEEK}"
          status: "HEALTHY"
          metrics:
            commits: ${{ steps.metrics.outputs.commits_count }}
            test_coverage: "${{ steps.metrics.outputs.coverage }}%"
            open_issues: ${{ steps.metrics.outputs.open_issues }}
          dora:
            deployment_frequency: "${{ steps.dora.outputs.deployment_frequency }} per week"
            change_failure_rate: "${{ steps.dora.outputs.change_failure_rate }}%"
          highlights:
            - "コミット数: ${{ steps.metrics.outputs.commits_count }}"
            - "テストカバレッジ: ${{ steps.metrics.outputs.coverage }}%"
          improvements:
            - "次週の改善提案をここに記載"
          time_spent: "$(date -u -d @${SECONDS} +'%M分%S秒')"
          EOF
          
      - name: Create weekly review issue
        uses: actions/github-script@v7
        with:
          script: |
            const week = new Date().toISOString().slice(0, 10);
            const weekNumber = Math.ceil((new Date() - new Date(new Date().getFullYear(), 0, 1)) / 604800000);
            
            const issueBody = `## 📊 週次PDCAレビュー - Week ${weekNumber}
            
            ### 📈 今週の成果
            - コミット数: ${{ steps.metrics.outputs.commits_count }}
            - テストカバレッジ: ${{ steps.metrics.outputs.coverage }}%
            - オープンIssue: ${{ steps.metrics.outputs.open_issues }}
            
            ### 🎯 DORAメトリクス
            - デプロイメント頻度: ${{ steps.dora.outputs.deployment_frequency }}回/週（目標: 3回/週）
            - 変更失敗率: ${{ steps.dora.outputs.change_failure_rate }}%（目標: 10%未満）
            
            ### ✅ 今週の完了タスク
            _ここに今週完了したタスクを記載_
            
            ### 🎯 次週の優先事項
            - [ ] 優先タスク1
            - [ ] 優先タスク2
            - [ ] 優先タスク3
            
            ### 💡 改善提案
            _継続的改善のアイデアをここに記載_
            
            ---
            
            **アクション**: このIssueにコメントで振り返りを追加してください。
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 Weekly PDCA Review - Week ${weekNumber}`,
              body: issueBody,
              labels: ['pdca', 'weekly-review', 'automated'],
              assignees: []
            });
            
      - name: Commit PDCA reports
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .pdca/
          git diff --quiet && git diff --staged --quiet || (git commit -m "📊 Add PDCA reports [skip ci]" && git push)
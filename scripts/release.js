#!/usr/bin/env node

/**
 * „É™„É™„Éº„ÇπËá™ÂãïÂåñ„Çπ„ÇØ„É™„Éó„Éà
 * „Éê„Éº„Ç∏„Éß„É≥ÁÆ°ÁêÜ„ÄÅ„É™„É™„Éº„Çπ„Éé„Éº„ÉàÁîüÊàê„ÄÅnpmÂÖ¨Èñã„ÇíËá™ÂãïÂåñ
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Ëâ≤‰ªò„ÅçÂá∫Âäõ
const colors = {
  red: (text) => `\x1b[31m${text}\x1b[0m`,
  green: (text) => `\x1b[32m${text}\x1b[0m`,
  yellow: (text) => `\x1b[33m${text}\x1b[0m`,
  blue: (text) => `\x1b[34m${text}\x1b[0m`,
};

// ÂÆüË°å„Ç≥„Éû„É≥„Éâ„ÅÆ„É©„ÉÉ„Éë„Éº
function exec(command, options = {}) {
  try {
    return execSync(command, { encoding: 'utf8', ...options });
  } catch (error) {
    if (!options.ignoreError) {
      console.error(colors.red(`‚ùå „Ç≥„Éû„É≥„ÉâÂÆüË°å„Ç®„É©„Éº: ${command}`));
      throw error;
    }
    return error.stdout || '';
  }
}

// „É¶„Éº„Ç∂„ÉºÂÖ•Âäõ„ÇíÂèñÂæó
function prompt(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      rl.close();
      resolve(answer);
    });
  });
}

// GitÁä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØ
function checkGitStatus() {
  const status = exec('git status --porcelain');
  if (status.trim()) {
    console.log(colors.red('‚ùå Êú™„Ç≥„Éü„ÉÉ„Éà„ÅÆÂ§âÊõ¥„Åå„ÅÇ„Çä„Åæ„Åô'));
    console.log(status);
    return false;
  }
  return true;
}

// „ÉÜ„Çπ„ÉàÂÆüË°å
function runTests() {
  console.log(colors.blue('\nüß™ „ÉÜ„Çπ„Éà„ÇíÂÆüË°å‰∏≠...'));
  try {
    exec('npm test -- --passWithNoTests');
    console.log(colors.green('‚úÖ „ÉÜ„Çπ„ÉàÊàêÂäü'));
    return true;
  } catch (error) {
    console.error(colors.red('‚ùå „ÉÜ„Çπ„ÉàÂ§±Êïó'));
    return false;
  }
}

// „Éì„É´„ÉâÂÆüË°å
function runBuild() {
  console.log(colors.blue('\nüèóÔ∏è  „Éì„É´„Éâ„ÇíÂÆüË°å‰∏≠...'));
  try {
    exec('npm run build');
    console.log(colors.green('‚úÖ „Éì„É´„ÉâÊàêÂäü'));
    return true;
  } catch (error) {
    console.error(colors.red('‚ùå „Éì„É´„ÉâÂ§±Êïó'));
    return false;
  }
}

// „Éê„Éº„Ç∏„Éß„É≥ÈÅ∏Êäû
async function selectVersion() {
  const currentVersion = require('../package.json').version;
  console.log(colors.blue(`\nÁèæÂú®„ÅÆ„Éê„Éº„Ç∏„Éß„É≥: ${currentVersion}`));
  
  console.log('\n„Éê„Éº„Ç∏„Éß„É≥„Çø„Ç§„Éó„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ:');
  console.log('1. patch („Éê„Ç∞‰øÆÊ≠£) - x.x.X');
  console.log('2. minor (Êñ∞Ê©üËÉΩ) - x.X.0');
  console.log('3. major (Á†¥Â£äÁöÑÂ§âÊõ¥) - X.0.0');
  console.log('4. „Ç´„Çπ„Çø„É†');
  
  const choice = await prompt('ÈÅ∏Êäû (1-4): ');
  
  switch (choice) {
    case '1':
      return 'patch';
    case '2':
      return 'minor';
    case '3':
      return 'major';
    case '4':
      return await prompt('„Éê„Éº„Ç∏„Éß„É≥„ÇíÂÖ•Âäõ (‰æã: 1.2.3): ');
    default:
      console.log(colors.red('ÁÑ°Âäπ„Å™ÈÅ∏Êäû'));
      process.exit(1);
  }
}

// „É™„É™„Éº„Çπ„Éé„Éº„ÉàÁîüÊàê
function generateReleaseNotes(version) {
  const commits = exec('git log $(git describe --tags --abbrev=0 2>/dev/null || echo HEAD)..HEAD --oneline', { ignoreError: true });
  
  let notes = `## üöÄ DNSweeper CLI v${version}\n\n`;
  notes += `„É™„É™„Éº„ÇπÊó•: ${new Date().toISOString().split('T')[0]}\n\n`;
  
  if (commits) {
    notes += '### Â§âÊõ¥ÂÜÖÂÆπ\n\n';
    const lines = commits.trim().split('\n');
    
    const features = [];
    const fixes = [];
    const others = [];
    
    lines.forEach(line => {
      if (line.includes('feat:') || line.includes('feature:')) {
        features.push(line);
      } else if (line.includes('fix:')) {
        fixes.push(line);
      } else {
        others.push(line);
      }
    });
    
    if (features.length > 0) {
      notes += '#### ‚ú® Êñ∞Ê©üËÉΩ\n';
      features.forEach(f => notes += `- ${f}\n`);
      notes += '\n';
    }
    
    if (fixes.length > 0) {
      notes += '#### üêõ „Éê„Ç∞‰øÆÊ≠£\n';
      fixes.forEach(f => notes += `- ${f}\n`);
      notes += '\n';
    }
    
    if (others.length > 0) {
      notes += '#### üìù „Åù„ÅÆ‰ªñ\n';
      others.forEach(o => notes += `- ${o}\n`);
      notes += '\n';
    }
  }
  
  notes += '### „Ç§„É≥„Çπ„Éà„Éº„É´\n\n```bash\nnpm install -g dnssweeper-cli@' + version + '\n```\n';
  
  return notes;
}

// „É°„Ç§„É≥Âá¶ÁêÜ
async function main() {
  console.log(colors.blue('üöÄ DNSweeper CLI „É™„É™„Éº„ÇπËá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É†\n'));
  
  // ‰∫ãÂâç„ÉÅ„Çß„ÉÉ„ÇØ
  console.log(colors.yellow('üìã ‰∫ãÂâç„ÉÅ„Çß„ÉÉ„ÇØ...'));
  
  if (!checkGitStatus()) {
    console.log(colors.yellow('\nÂ§âÊõ¥„Çí„Ç≥„Éü„ÉÉ„Éà„Åó„Åæ„Åô„Åã? (y/n)'));
    const answer = await prompt('> ');
    if (answer.toLowerCase() === 'y') {
      const message = await prompt('„Ç≥„Éü„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏: ');
      exec(`git add -A && git commit -m "${message}"`);
    } else {
      process.exit(1);
    }
  }
  
  // „É°„Ç§„É≥„Éñ„É©„É≥„ÉÅ„Å´„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
  const branch = exec('git branch --show-current').trim();
  if (branch !== 'main' && branch !== 'master') {
    console.log(colors.yellow(`‚ö†Ô∏è  ÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ: ${branch}`));
    console.log('„É°„Ç§„É≥„Éñ„É©„É≥„ÉÅ„Åß„ÅÆ„É™„É™„Éº„Çπ„ÇíÊé®Â•®„Åó„Åæ„Åô');
    const answer = await prompt('Á∂öË°å„Åó„Åæ„Åô„Åã? (y/n): ');
    if (answer.toLowerCase() !== 'y') {
      process.exit(1);
    }
  }
  
  // „ÉÜ„Çπ„Éà„Å®„Éì„É´„Éâ
  if (!runTests()) {
    process.exit(1);
  }
  
  if (!runBuild()) {
    process.exit(1);
  }
  
  // „Éê„Éº„Ç∏„Éß„É≥ÈÅ∏Êäû
  const versionType = await selectVersion();
  
  // „Éê„Éº„Ç∏„Éß„É≥Êõ¥Êñ∞
  console.log(colors.blue('\nüìù „Éê„Éº„Ç∏„Éß„É≥„ÇíÊõ¥Êñ∞‰∏≠...'));
  let newVersion;
  if (['patch', 'minor', 'major'].includes(versionType)) {
    const result = exec(`npm version ${versionType} --no-git-tag-version`);
    newVersion = result.match(/v?(\d+\.\d+\.\d+)/)[1];
  } else {
    exec(`npm version ${versionType} --no-git-tag-version`);
    newVersion = versionType;
  }
  
  console.log(colors.green(`‚úÖ Êñ∞„Éê„Éº„Ç∏„Éß„É≥: ${newVersion}`));
  
  // „É™„É™„Éº„Çπ„Éé„Éº„ÉàÁîüÊàê
  const releaseNotes = generateReleaseNotes(newVersion);
  console.log(colors.blue('\nüìÑ „É™„É™„Éº„Çπ„Éé„Éº„Éà:'));
  console.log(releaseNotes);
  
  // Á¢∫Ë™ç
  console.log(colors.yellow('\nüö® „É™„É™„Éº„ÇπÂâç„ÅÆÊúÄÁµÇÁ¢∫Ë™ç'));
  console.log(`- „Éê„Éº„Ç∏„Éß„É≥: ${newVersion}`);
  console.log(`- npmÂÖ¨Èñã: dnssweeper-cli@${newVersion}`);
  console.log(`- GitHub„Çø„Ç∞: v${newVersion}`);
  
  const answer = await prompt('\n„É™„É™„Éº„Çπ„ÇíÂÆüË°å„Åó„Åæ„Åô„Åã? (y/n): ');
  if (answer.toLowerCase() !== 'y') {
    console.log(colors.yellow('„É™„É™„Éº„Çπ„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü'));
    // „Éê„Éº„Ç∏„Éß„É≥„ÇíÊàª„Åô
    exec('git checkout -- package.json package-lock.json');
    process.exit(0);
  }
  
  // „Ç≥„Éü„ÉÉ„Éà„Å®„Çø„Ç∞‰ΩúÊàê
  console.log(colors.blue('\nüì§ Â§âÊõ¥„Çí„Ç≥„Éü„ÉÉ„Éà‰∏≠...'));
  exec('git add package.json package-lock.json');
  exec(`git commit -m "chore: release v${newVersion}"`);
  exec(`git tag -a v${newVersion} -m "Release v${newVersion}"`);
  
  // „Éó„ÉÉ„Ç∑„É•
  console.log(colors.blue('\nüì§ GitHub„Å´„Éó„ÉÉ„Ç∑„É•‰∏≠...'));
  exec('git push');
  exec('git push --tags');
  
  console.log(colors.green('\n‚ú® „É™„É™„Éº„ÇπÊ∫ñÂÇôÂÆå‰∫ÜÔºÅ'));
  console.log('\nÊ¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:');
  console.log('1. GitHub Actions „ÅÆ Publish „ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÇíÊâãÂãïÂÆüË°å');
  console.log(`   https://github.com/Kazu-dnssweeper/dnssweeper-cli/actions/workflows/publish.yml`);
  console.log(`2. „Éê„Éº„Ç∏„Éß„É≥ ${newVersion} „ÇíÂÖ•Âäõ`);
  console.log('3. „ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂÆüË°å');
  console.log('\n „Åæ„Åü„ÅØ GitHub „Åß„É™„É™„Éº„Çπ„Çí‰ΩúÊàê„Åô„Çã„Å®Ëá™ÂãïÁöÑ„Å´ npm „Å´ÂÖ¨Èñã„Åï„Çå„Åæ„Åô');
}

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞‰ªò„Åç„ÅßÂÆüË°å
if (require.main === module) {
  main().catch((error) => {
    console.error(colors.red(`\n‚ùå „Ç®„É©„Éº: ${error.message}`));
    process.exit(1);
  });
}
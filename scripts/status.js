#!/usr/bin/env node
/**
 * „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çπ„ÉÜ„Éº„Çø„ÇπÁ¢∫Ë™ç„Çπ„ÇØ„É™„Éó„Éà
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m'
};

function color(text, colorName) {
  return `${colors[colorName]}${text}${colors.reset}`;
}

function exec(command, options = {}) {
  try {
    return execSync(command, { encoding: 'utf8', ...options }).trim();
  } catch (error) {
    if (options.ignoreError) {
      return '';
    }
    throw error;
  }
}

function checkMark(condition) {
  return condition ? color('‚úÖ', 'green') : color('‚ùå', 'red');
}

async function main() {
  console.log(color('\nüîç DNSweeper CLI „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çπ„ÉÜ„Éº„Çø„Çπ\n', 'cyan'));
  
  // 1. Âü∫Êú¨ÊÉÖÂ†±
  console.log(color('üì¶ Âü∫Êú¨ÊÉÖÂ†±', 'blue'));
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  console.log(`  „Éê„Éº„Ç∏„Éß„É≥: ${packageJson.version}`);
  console.log(`  Ë™¨Êòé: ${packageJson.description}`);
  console.log(`  „É©„Ç§„Çª„É≥„Çπ: ${packageJson.license}`);
  
  // 2. GitÁä∂ÊÖã
  console.log(color('\nüìã GitÁä∂ÊÖã', 'blue'));
  const branch = exec('git branch --show-current');
  console.log(`  ÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ: ${branch}`);
  
  const lastCommit = exec('git log -1 --oneline');
  console.log(`  ÊúÄÊñ∞„Ç≥„Éü„ÉÉ„Éà: ${lastCommit}`);
  
  const uncommitted = exec('git status --porcelain', { ignoreError: true });
  console.log(`  Êú™„Ç≥„Éü„ÉÉ„Éà„ÅÆÂ§âÊõ¥: ${uncommitted ? color('„ÅÇ„Çä', 'yellow') : color('„Å™„Åó', 'green')}`);
  
  // 3. „Éï„Ç°„Ç§„É´ÊßãÊàê„ÉÅ„Çß„ÉÉ„ÇØ
  console.log(color('\nüìÇ „Éï„Ç°„Ç§„É´ÊßãÊàê', 'blue'));
  const requiredFiles = [
    'package.json',
    'tsconfig.json',
    'jest.config.js',
    '.eslintrc.js',
    'README.md',
    'LICENSE',
    'patterns.json',
    'messages-ja.json',
    'messages-en.json'
  ];
  
  for (const file of requiredFiles) {
    const exists = fs.existsSync(file);
    console.log(`  ${checkMark(exists)} ${file}`);
  }
  
  // 4. GitHub ActionsÁä∂ÊÖã
  console.log(color('\nüîÑ GitHub Actions', 'blue'));
  try {
    const runs = exec('gh run list --limit 3 --json status,conclusion,name,createdAt');
    const runData = JSON.parse(runs);
    
    if (runData.length > 0) {
      console.log('  ÊúÄËøë„ÅÆÂÆüË°å:');
      runData.forEach(run => {
        const status = run.conclusion || run.status;
        const icon = status === 'success' ? '‚úÖ' : status === 'failure' ? '‚ùå' : '‚è≥';
        const date = new Date(run.createdAt).toLocaleString('ja-JP');
        console.log(`    ${icon} ${run.name}: ${status} (${date})`);
      });
    } else {
      console.log('  ÂÆüË°åÂ±•Ê≠¥„Å™„Åó');
    }
  } catch (error) {
    console.log('  ' + color('GitHub CLI„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì', 'yellow'));
  }
  
  // 5. ‰æùÂ≠òÈñ¢‰øÇ
  console.log(color('\nüìö ‰æùÂ≠òÈñ¢‰øÇ', 'blue'));
  const outdated = exec('npm outdated', { ignoreError: true });
  if (outdated) {
    console.log('  Êõ¥Êñ∞ÂèØËÉΩ„Å™„Éë„ÉÉ„Ç±„Éº„Ç∏:');
    console.log(outdated.split('\n').map(line => '    ' + line).join('\n'));
  } else {
    console.log('  ' + color('„Åô„Åπ„Å¶ÊúÄÊñ∞„Åß„Åô', 'green'));
  }
  
  // 6. npmÂÖ¨ÈñãÁä∂ÊÖã
  console.log(color('\nüåê npmÂÖ¨ÈñãÁä∂ÊÖã', 'blue'));
  const npmInfo = exec(`npm view ${packageJson.name} version`, { ignoreError: true });
  if (npmInfo) {
    console.log(`  ÂÖ¨Èñã„Éê„Éº„Ç∏„Éß„É≥: ${npmInfo}`);
    console.log(`  „É≠„Éº„Ç´„É´„Éê„Éº„Ç∏„Éß„É≥: ${packageJson.version}`);
    
    if (npmInfo === packageJson.version) {
      console.log('  ' + color('ÊúÄÊñ∞Áâà„ÅåÂÖ¨Èñã„Åï„Çå„Å¶„ÅÑ„Åæ„Åô', 'green'));
    } else {
      console.log('  ' + color('Êñ∞„Åó„ÅÑ„Éê„Éº„Ç∏„Éß„É≥„ÅÆÂÖ¨Èñã„ÅåÂøÖË¶Å„Åß„Åô', 'yellow'));
    }
  } else {
    console.log('  ' + color('„Åæ„Å†npm„Å´ÂÖ¨Èñã„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì', 'yellow'));
  }
  
  // 7. „ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏
  console.log(color('\nüß™ „ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏', 'blue'));
  if (fs.existsSync('coverage/coverage-summary.json')) {
    const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
    const total = coverage.total;
    console.log(`  Ë°å„Ç´„Éê„É¨„ÉÉ„Ç∏: ${total.lines.pct}%`);
    console.log(`  Èñ¢Êï∞„Ç´„Éê„É¨„ÉÉ„Ç∏: ${total.functions.pct}%`);
    console.log(`  „Éñ„É©„É≥„ÉÅ„Ç´„Éê„É¨„ÉÉ„Ç∏: ${total.branches.pct}%`);
  } else {
    console.log('  „Ç´„Éê„É¨„ÉÉ„Ç∏„Éá„Éº„Çø„Å™„ÅóÔºànpm test -- --coverage „ÇíÂÆüË°åÔºâ');
  }
  
  console.log(color('\n‚ú® „Çπ„ÉÜ„Éº„Çø„ÇπÁ¢∫Ë™çÂÆå‰∫Ü\n', 'green'));
}

main().catch(error => {
  console.error(color(`\n‚ùå „Ç®„É©„Éº: ${error.message}`, 'red'));
  process.exit(1);
});
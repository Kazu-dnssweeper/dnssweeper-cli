name: PDCA Slack Notifications
on:
  workflow_run:
    workflows: ["Daily PDCA Check", "Weekly PDCA Review"]
    types:
      - completed

jobs:
  notify:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion != 'skipped' }}
    
    steps:
      - name: Prepare notification data
        id: prepare
        run: |
          WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
          CONCLUSION="${{ github.event.workflow_run.conclusion }}"
          RUN_URL="${{ github.event.workflow_run.html_url }}"
          
          if [ "$CONCLUSION" = "success" ]; then
            COLOR="good"
            STATUS_EMOJI="✅"
          elif [ "$CONCLUSION" = "failure" ]; then
            COLOR="danger"
            STATUS_EMOJI="❌"
          else
            COLOR="warning"
            STATUS_EMOJI="⚠️"
          fi
          
          echo "color=${COLOR}" >> $GITHUB_OUTPUT
          echo "status_emoji=${STATUS_EMOJI}" >> $GITHUB_OUTPUT
          echo "workflow_name=${WORKFLOW_NAME}" >> $GITHUB_OUTPUT
          echo "run_url=${RUN_URL}" >> $GITHUB_OUTPUT
          
      - name: Send Slack notification
        if: ${{ vars.SLACK_WEBHOOK_URL != '' }}
        run: |
          PAYLOAD=$(cat <<EOF
          {
            "text": "${{ steps.prepare.outputs.status_emoji }} DNSweeper PDCA: ${{ steps.prepare.outputs.workflow_name }}",
            "attachments": [
              {
                "color": "${{ steps.prepare.outputs.color }}",
                "fields": [
                  {
                    "title": "ワークフロー",
                    "value": "${{ steps.prepare.outputs.workflow_name }}",
                    "short": true
                  },
                  {
                    "title": "ステータス",
                    "value": "${{ github.event.workflow_run.conclusion }}",
                    "short": true
                  },
                  {
                    "title": "実行者",
                    "value": "${{ github.event.workflow_run.actor.login }}",
                    "short": true
                  },
                  {
                    "title": "実行時間",
                    "value": "$(date +'%Y-%m-%d %H:%M:%S JST')",
                    "short": true
                  }
                ],
                "actions": [
                  {
                    "type": "button",
                    "text": "詳細を見る",
                    "url": "${{ steps.prepare.outputs.run_url }}"
                  }
                ]
              }
            ]
          }
          EOF
          )
          
          curl -X POST -H 'Content-type: application/json' \
            --data "$PAYLOAD" \
            "${{ vars.SLACK_WEBHOOK_URL }}"
            
      - name: Create summary comment
        if: ${{ github.event.workflow_run.event == 'workflow_dispatch' }}
        uses: actions/github-script@v7
        with:
          script: |
            const workflowName = '${{ steps.prepare.outputs.workflow_name }}';
            const conclusion = '${{ github.event.workflow_run.conclusion }}';
            const runUrl = '${{ steps.prepare.outputs.run_url }}';
            
            let summaryMessage = `## ${workflowName} 実行完了\n\n`;
            summaryMessage += `- **ステータス**: ${conclusion === 'success' ? '✅ 成功' : '❌ 失敗'}\n`;
            summaryMessage += `- **実行時刻**: ${new Date().toLocaleString('ja-JP', { timeZone: 'Asia/Tokyo' })}\n`;
            summaryMessage += `- **[詳細を確認](${runUrl})**\n`;
            
            // 最新のオープンIssueにコメント
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'pdca',
              sort: 'created',
              direction: 'desc',
              per_page: 1
            });
            
            if (issues.data.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: summaryMessage
              });
            }